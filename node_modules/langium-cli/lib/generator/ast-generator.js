"use strict";
/******************************************************************************
 * Copyright 2021 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateAst = void 0;
const langium_1 = require("langium");
const type_system_1 = require("langium/lib/grammar/type-system");
const util_1 = require("./util");
function generateAst(services, grammars, config) {
    const astTypes = (0, type_system_1.collectAst)(grammars, services.shared.workspace.LangiumDocuments);
    const fileNode = new langium_1.CompositeGeneratorNode();
    fileNode.append(util_1.generatedHeader, '/* eslint-disable */', langium_1.NL);
    const crossRef = grammars.some(grammar => hasCrossReferences(grammar));
    const importFrom = config.langiumInternal ? '../../syntax-tree' : 'langium';
    fileNode.append(`import { AstNode, AbstractAstReflection${crossRef ? ', Reference' : ''}, ReferenceInfo, TypeMetaData } from '${importFrom}';`, langium_1.NL, langium_1.NL);
    astTypes.unions.forEach(union => fileNode.append(union.toAstTypesString(true), langium_1.NL));
    astTypes.interfaces.forEach(iFace => fileNode.append(iFace.toAstTypesString(true), langium_1.NL));
    astTypes.unions = astTypes.unions.filter(e => e.reflection);
    fileNode.append(generateAstReflection(config, astTypes));
    return (0, langium_1.toString)(fileNode);
}
exports.generateAst = generateAst;
function hasCrossReferences(grammar) {
    return Boolean((0, langium_1.streamAllContents)(grammar).find(langium_1.GrammarAST.isCrossReference));
}
function generateAstReflection(config, astTypes) {
    const typeNames = astTypes.interfaces.map(t => t.name)
        .concat(astTypes.unions.map(t => t.name))
        .sort();
    const crossReferenceTypes = buildCrossReferenceTypes(astTypes);
    const reflectionNode = new langium_1.CompositeGeneratorNode();
    reflectionNode.append(`export interface ${config.projectName}AstType {`, langium_1.NL);
    reflectionNode.indent(astTypeBody => {
        for (const type of typeNames) {
            astTypeBody.append(type, ': ', type, langium_1.NL);
        }
    });
    reflectionNode.append('}', langium_1.NL, langium_1.NL);
    reflectionNode.append(`export class ${config.projectName}AstReflection extends AbstractAstReflection {`, langium_1.NL, langium_1.NL);
    reflectionNode.indent(classBody => {
        classBody.append('getAllTypes(): string[] {', langium_1.NL);
        classBody.indent(allTypes => {
            allTypes.append(`return [${typeNames.map(e => `'${e}'`).join(', ')}];`, langium_1.NL);
        });
        classBody.append('}', langium_1.NL, langium_1.NL, 'protected override computeIsSubtype(subtype: string, supertype: string): boolean {', langium_1.NL, buildIsSubtypeMethod(astTypes), '}', langium_1.NL, langium_1.NL, 'getReferenceType(refInfo: ReferenceInfo): string {', langium_1.NL, buildReferenceTypeMethod(crossReferenceTypes), '}', langium_1.NL, langium_1.NL, 'getTypeMetaData(type: string): TypeMetaData {', langium_1.NL, buildTypeMetaDataMethod(astTypes), '}', langium_1.NL);
    });
    reflectionNode.append('}', langium_1.NL, langium_1.NL, `export const reflection = new ${config.projectName}AstReflection();`, langium_1.NL);
    return reflectionNode;
}
function buildTypeMetaDataMethod(astTypes) {
    const typeSwitchNode = new langium_1.IndentNode();
    typeSwitchNode.append('switch (type) {', langium_1.NL);
    typeSwitchNode.indent(caseNode => {
        for (const interfaceType of astTypes.interfaces) {
            const props = interfaceType.properties;
            const arrayProps = props.filter(e => (0, type_system_1.hasArrayType)(e.type));
            const booleanProps = props.filter(e => (0, type_system_1.hasBooleanType)(e.type));
            if (arrayProps.length > 0 || booleanProps.length > 0) {
                caseNode.append(`case '${interfaceType.name}': {`, langium_1.NL);
                caseNode.indent(caseContent => {
                    caseContent.append('return {', langium_1.NL);
                    caseContent.indent(returnType => {
                        returnType.append(`name: '${interfaceType.name}',`, langium_1.NL);
                        returnType.append('mandatory: [', langium_1.NL, buildMandatoryType(arrayProps, booleanProps), ']', langium_1.NL);
                    });
                    caseContent.append('};', langium_1.NL);
                });
                caseNode.append('}', langium_1.NL);
            }
        }
        caseNode.append('default: {', langium_1.NL);
        caseNode.indent(defaultNode => {
            defaultNode.append('return {', langium_1.NL);
            defaultNode.indent(defaultType => {
                defaultType.append('name: type,', langium_1.NL, 'mandatory: []', langium_1.NL);
            });
            defaultNode.append('};', langium_1.NL);
        });
        caseNode.append('}', langium_1.NL);
    });
    typeSwitchNode.append('}', langium_1.NL);
    return typeSwitchNode;
}
function buildMandatoryType(arrayProps, booleanProps) {
    const indent = new langium_1.IndentNode();
    const all = arrayProps.concat(booleanProps).sort((a, b) => a.name.localeCompare(b.name));
    for (let i = 0; i < all.length; i++) {
        const property = all[i];
        const type = arrayProps.includes(property) ? 'array' : 'boolean';
        indent.append("{ name: '", property.name, "', type: '", type, "' }", i < all.length - 1 ? ',' : '', langium_1.NL);
    }
    return indent;
}
function buildReferenceTypeMethod(crossReferenceTypes) {
    const typeSwitchNode = new langium_1.IndentNode();
    const buckets = new langium_1.MultiMap(crossReferenceTypes.map(e => [e.referenceType, `${e.type}:${e.feature}`]));
    typeSwitchNode.append('const referenceId = `${refInfo.container.$type}:${refInfo.property}`;', langium_1.NL);
    typeSwitchNode.append('switch (referenceId) {', langium_1.NL);
    typeSwitchNode.indent(caseNode => {
        for (const [target, refs] of buckets.entriesGroupedByKey()) {
            for (let i = 0; i < refs.length; i++) {
                const ref = refs[i];
                caseNode.append(`case '${ref}':`);
                if (i === refs.length - 1) {
                    caseNode.append(' {', langium_1.NL);
                }
                else {
                    caseNode.append(langium_1.NL);
                }
            }
            caseNode.indent(caseContent => {
                caseContent.append(`return ${target};`, langium_1.NL);
            });
            caseNode.append('}', langium_1.NL);
        }
        caseNode.append('default: {', langium_1.NL);
        caseNode.indent(defaultNode => {
            defaultNode.append('throw new Error(`${referenceId} is not a valid reference id.`);', langium_1.NL);
        });
        caseNode.append('}', langium_1.NL);
    });
    typeSwitchNode.append('}', langium_1.NL);
    return typeSwitchNode;
}
function buildCrossReferenceTypes(astTypes) {
    const crossReferences = new langium_1.MultiMap();
    for (const typeInterface of astTypes.interfaces) {
        for (const property of typeInterface.properties.sort((a, b) => a.name.localeCompare(b.name))) {
            const refTypes = (0, type_system_1.findReferenceTypes)(property.type);
            for (const refType of refTypes) {
                crossReferences.add(typeInterface.name, {
                    type: typeInterface.name,
                    feature: property.name,
                    referenceType: refType
                });
            }
        }
        // Since the types are topologically sorted we can assume
        // that all super type properties have already been processed
        for (const superType of typeInterface.interfaceSuperTypes) {
            const superTypeCrossReferences = crossReferences.get(superType.name).map(e => (Object.assign(Object.assign({}, e), { type: typeInterface.name })));
            crossReferences.addAll(typeInterface.name, superTypeCrossReferences);
        }
    }
    return Array.from(crossReferences.values()).sort((a, b) => a.type.localeCompare(b.type));
}
function buildIsSubtypeMethod(astTypes) {
    const methodNode = new langium_1.IndentNode();
    methodNode.append('switch (subtype) {', langium_1.NL);
    methodNode.indent(switchNode => {
        const groups = groupBySupertypes(astTypes);
        for (const [superTypes, typeGroup] of groups.entriesGroupedByKey()) {
            for (const typeName of typeGroup) {
                switchNode.append(`case ${typeName}:`, langium_1.NL);
            }
            switchNode.contents.pop();
            switchNode.append(' {', langium_1.NL);
            switchNode.indent(caseNode => {
                caseNode.append(`return ${superTypes.split(':').sort().map(e => `this.isSubtype(${e}, supertype)`).join(' || ')};`);
            });
            switchNode.append(langium_1.NL, '}', langium_1.NL);
        }
        switchNode.append('default: {', langium_1.NL);
        switchNode.indent(defaultNode => {
            defaultNode.append('return false;', langium_1.NL);
        });
        switchNode.append('}', langium_1.NL);
    });
    methodNode.append('}', langium_1.NL);
    return methodNode;
}
function groupBySupertypes(astTypes) {
    const hierarchy = (0, type_system_1.collectTypeHierarchy)((0, type_system_1.mergeTypesAndInterfaces)(astTypes));
    const superToChild = new langium_1.MultiMap();
    for (const [name, superTypes] of hierarchy.superTypes.entriesGroupedByKey()) {
        superToChild.add(superTypes.join(':'), name);
    }
    return superToChild;
}
//# sourceMappingURL=ast-generator.js.map