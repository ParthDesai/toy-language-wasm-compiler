"use strict";
/******************************************************************************
 * This file was generated by langium-cli 1.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.reflection = exports.WorldsAstReflection = exports.isWorld = exports.World = exports.isTransfer = exports.Transfer = exports.isMain = exports.Main = exports.isInstance = exports.Instance = exports.isAnimal = exports.Animal = void 0;
/* eslint-disable */
const langium_1 = require("langium");
exports.Animal = 'Animal';
function isAnimal(item) {
    return exports.reflection.isInstance(item, exports.Animal);
}
exports.isAnimal = isAnimal;
exports.Instance = 'Instance';
function isInstance(item) {
    return exports.reflection.isInstance(item, exports.Instance);
}
exports.isInstance = isInstance;
exports.Main = 'Main';
function isMain(item) {
    return exports.reflection.isInstance(item, exports.Main);
}
exports.isMain = isMain;
exports.Transfer = 'Transfer';
function isTransfer(item) {
    return exports.reflection.isInstance(item, exports.Transfer);
}
exports.isTransfer = isTransfer;
exports.World = 'World';
function isWorld(item) {
    return exports.reflection.isInstance(item, exports.World);
}
exports.isWorld = isWorld;
class WorldsAstReflection extends langium_1.AbstractAstReflection {
    getAllTypes() {
        return ['Animal', 'Instance', 'Main', 'Transfer', 'World'];
    }
    computeIsSubtype(subtype, supertype) {
        switch (subtype) {
            default: {
                return false;
            }
        }
    }
    getReferenceType(refInfo) {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'Instance:species': {
                return exports.Animal;
            }
            case 'Transfer:animalToTransfer':
            case 'World:contains': {
                return exports.Instance;
            }
            case 'Transfer:from':
            case 'Transfer:to': {
                return exports.World;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
    getTypeMetaData(type) {
        switch (type) {
            case 'Main': {
                return {
                    name: 'Main',
                    mandatory: [
                        { name: 'animals', type: 'array' },
                        { name: 'instances', type: 'array' },
                        { name: 'transfer', type: 'array' },
                        { name: 'worlds', type: 'array' }
                    ]
                };
            }
            case 'World': {
                return {
                    name: 'World',
                    mandatory: [
                        { name: 'contains', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}
exports.WorldsAstReflection = WorldsAstReflection;
exports.reflection = new WorldsAstReflection();
//# sourceMappingURL=ast.js.map